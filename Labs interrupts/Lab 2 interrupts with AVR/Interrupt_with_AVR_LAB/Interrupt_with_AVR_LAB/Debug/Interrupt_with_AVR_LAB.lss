
Interrupt_with_AVR_LAB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001bc  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f5  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  00000559  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000632c  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00006ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000264  00000000  00000000  00006df6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__vector_1>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__vector_2>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__vector_3>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	a3 c0       	rjmp	.+326    	; 0x1aa <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
#define INT_MCUCSR  *(volatile unsigned int *)(IO_BASE+0x34)

int main ()
{
	// Set int0 logical
	SET_BIT(INT_MCUCR,0) ;
  66:	85 b7       	in	r24, 0x35	; 53
  68:	96 b7       	in	r25, 0x36	; 54
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	96 bf       	out	0x36, r25	; 54
  6e:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(INT_MCUCR,1) ;
  70:	85 b7       	in	r24, 0x35	; 53
  72:	96 b7       	in	r25, 0x36	; 54
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	96 bf       	out	0x36, r25	; 54
  78:	85 bf       	out	0x35, r24	; 53
	// set int1 rising edge
	SET_BIT(INT_MCUCR,2) ;
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	96 b7       	in	r25, 0x36	; 54
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	96 bf       	out	0x36, r25	; 54
  82:	85 bf       	out	0x35, r24	; 53
	SET_BIT(INT_MCUCR,3) ;
  84:	85 b7       	in	r24, 0x35	; 53
  86:	96 b7       	in	r25, 0x36	; 54
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	96 bf       	out	0x36, r25	; 54
  8c:	85 bf       	out	0x35, r24	; 53
	// Set int2 falling edge
	RESET_BIT(INT_MCUCR,6) ;
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	96 b7       	in	r25, 0x36	; 54
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	96 bf       	out	0x36, r25	; 54
  96:	85 bf       	out	0x35, r24	; 53
	// Enable all int 0,1,2
	SET_BIT(INT_GICR,5) ;
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	9c b7       	in	r25, 0x3c	; 60
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	9c bf       	out	0x3c, r25	; 60
  a0:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(INT_GICR,6) ;
  a2:	8b b7       	in	r24, 0x3b	; 59
  a4:	9c b7       	in	r25, 0x3c	; 60
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	9c bf       	out	0x3c, r25	; 60
  aa:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(INT_GICR,7) ;
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	9c b7       	in	r25, 0x3c	; 60
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	9c bf       	out	0x3c, r25	; 60
  b4:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt
	sei() ;
  b6:	78 94       	sei
	// Set Pin(5,6,7) as output in portD 
	SET_BIT(IO_DDRD,5) ;
  b8:	81 b3       	in	r24, 0x11	; 17
  ba:	92 b3       	in	r25, 0x12	; 18
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	92 bb       	out	0x12, r25	; 18
  c0:	81 bb       	out	0x11, r24	; 17
	SET_BIT(IO_DDRD,6) ;
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	92 b3       	in	r25, 0x12	; 18
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	92 bb       	out	0x12, r25	; 18
  ca:	81 bb       	out	0x11, r24	; 17
	SET_BIT(IO_DDRD,7 ) ;
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	92 b3       	in	r25, 0x12	; 18
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	92 bb       	out	0x12, r25	; 18
  d4:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		RESET_BIT(IO_PORTD,5) ;
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	93 b3       	in	r25, 0x13	; 19
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	93 bb       	out	0x13, r25	; 19
  de:	82 bb       	out	0x12, r24	; 18
		RESET_BIT(IO_PORTD,6) ;
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	93 b3       	in	r25, 0x13	; 19
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	93 bb       	out	0x13, r25	; 19
  e8:	82 bb       	out	0x12, r24	; 18
		RESET_BIT(IO_PORTD,7) ;
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	93 b3       	in	r25, 0x13	; 19
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	93 bb       	out	0x13, r25	; 19
  f2:	82 bb       	out	0x12, r24	; 18
		
	}
  f4:	f0 cf       	rjmp	.-32     	; 0xd6 <main+0x70>

000000f6 <__vector_1>:

	return 0 ;

}
ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	SET_BIT(IO_PORTD,5) ;
 106:	82 b3       	in	r24, 0x12	; 18
 108:	93 b3       	in	r25, 0x13	; 19
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	93 bb       	out	0x13, r25	; 19
 10e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	98 e1       	ldi	r25, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <__vector_1+0x20>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_1+0x2a>
 120:	00 00       	nop
	_delay_ms(1000) ;
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_2>:
ISR(INT1_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	SET_BIT(IO_PORTD,6) ;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	93 b3       	in	r25, 0x13	; 19
 146:	80 64       	ori	r24, 0x40	; 64
 148:	93 bb       	out	0x13, r25	; 19
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <__vector_2+0x20>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_2+0x2a>
 15c:	00 00       	nop
	_delay_ms(1000) ;
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_3>:
ISR(INT2_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	SET_BIT(IO_PORTD,7) ;
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	93 b3       	in	r25, 0x13	; 19
 182:	80 68       	ori	r24, 0x80	; 128
 184:	93 bb       	out	0x13, r25	; 19
 186:	82 bb       	out	0x12, r24	; 18
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	89 e6       	ldi	r24, 0x69	; 105
 18c:	98 e1       	ldi	r25, 0x18	; 24
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <__vector_3+0x20>
 196:	00 c0       	rjmp	.+0      	; 0x198 <__vector_3+0x2a>
 198:	00 00       	nop
	_delay_ms(1000) ;
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
