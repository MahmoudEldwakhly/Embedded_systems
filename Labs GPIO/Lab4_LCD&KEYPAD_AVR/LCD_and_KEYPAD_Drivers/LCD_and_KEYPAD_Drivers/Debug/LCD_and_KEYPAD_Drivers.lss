
LCD_and_KEYPAD_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000374  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034c  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bac  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000627b  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037d  00000000  00000000  00007e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000233b  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	6a d1       	rcall	.+724    	; 0x34c <main>
  78:	7b c1       	rjmp	.+758    	; 0x370 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 7f       	andi	r24, 0xF0	; 240
  80:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 95       	ret

0000008e <Keypad_getkey>:
}

char Keypad_getkey(){
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 e6       	ldi	r16, 0x60	; 96
  a4:	10 e0       	ldi	r17, 0x00	; 0
	int i,j;
	for (i = 0; i < 4; i++){
  a6:	c0 e0       	ldi	r28, 0x00	; 0
  a8:	d0 e0       	ldi	r29, 0x00	; 0
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  aa:	d8 01       	movw	r26, r16
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	0f 2e       	mov	r0, r31
  b2:	f8 e6       	ldi	r31, 0x68	; 104
  b4:	cf 2e       	mov	r12, r31
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	df 2e       	mov	r13, r31
  ba:	f0 2d       	mov	r31, r0
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
  bc:	a1 2c       	mov	r10, r1
  be:	b1 2c       	mov	r11, r1
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	ba 01       	movw	r22, r20
  c4:	0c 90       	ld	r0, X
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Keypad_getkey+0x3e>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Keypad_getkey+0x3a>
  d0:	9a 01       	movw	r18, r20
  d2:	12 96       	adiw	r26, 0x02	; 2
  d4:	0c 90       	ld	r0, X
  d6:	12 97       	sbiw	r26, 0x02	; 2
  d8:	02 c0       	rjmp	.+4      	; 0xde <Keypad_getkey+0x50>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <Keypad_getkey+0x4c>
  e2:	26 2b       	or	r18, r22
  e4:	82 2f       	mov	r24, r18
  e6:	89 2b       	or	r24, r25
  e8:	9a 01       	movw	r18, r20
  ea:	14 96       	adiw	r26, 0x04	; 4
  ec:	0c 90       	ld	r0, X
  ee:	14 97       	sbiw	r26, 0x04	; 4
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Keypad_getkey+0x68>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Keypad_getkey+0x64>
  fa:	28 2b       	or	r18, r24
  fc:	ca 01       	movw	r24, r20
  fe:	16 96       	adiw	r26, 0x06	; 6
 100:	0c 90       	ld	r0, X
 102:	16 97       	sbiw	r26, 0x06	; 6
 104:	02 c0       	rjmp	.+4      	; 0x10a <Keypad_getkey+0x7c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Keypad_getkey+0x78>
 10e:	82 2b       	or	r24, r18
 110:	82 bb       	out	0x12, r24	; 18
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
 112:	92 b3       	in	r25, 0x12	; 18
 114:	f8 01       	movw	r30, r16
 116:	80 81       	ld	r24, Z
 118:	0e 5f       	subi	r16, 0xFE	; 254
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	9a 01       	movw	r18, r20
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Keypad_getkey+0x96>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <Keypad_getkey+0x92>
 128:	82 2f       	mov	r24, r18
 12a:	80 95       	com	r24
 12c:	89 23       	and	r24, r25
 12e:	82 bb       	out	0x12, r24	; 18
 130:	f6 01       	movw	r30, r12
 132:	7a 01       	movw	r14, r20
 134:	6a 2d       	mov	r22, r10
 136:	7b 2d       	mov	r23, r11
 138:	05 c0       	rjmp	.+10     	; 0x144 <Keypad_getkey+0xb6>
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	e8 1a       	sub	r14, r24
 142:	f8 0a       	sbc	r15, r24
		for(j = 0; j < 4; j++){
			if (!(keypadPIN & (1 << Key_padRow[j])))
 144:	80 b3       	in	r24, 0x10	; 16
 146:	20 81       	ld	r18, Z
 148:	32 96       	adiw	r30, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Keypad_getkey+0xc6>
 150:	95 95       	asr	r25
 152:	87 95       	ror	r24
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <Keypad_getkey+0xc2>
 158:	80 fd       	sbrc	r24, 0
 15a:	4f c0       	rjmp	.+158    	; 0x1fa <Keypad_getkey+0x16c>
 15c:	ca 01       	movw	r24, r20
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Keypad_getkey+0xd6>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <Keypad_getkey+0xd2>
 168:	9c 01       	movw	r18, r24
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	82 23       	and	r24, r18
 170:	93 23       	and	r25, r19
 172:	89 2b       	or	r24, r25
 174:	d1 f3       	breq	.-12     	; 0x16a <Keypad_getkey+0xdc>
				switch(i){
 176:	c1 30       	cpi	r28, 0x01	; 1
 178:	d1 05       	cpc	r29, r1
 17a:	c1 f0       	breq	.+48     	; 0x1ac <Keypad_getkey+0x11e>
 17c:	1c f4       	brge	.+6      	; 0x184 <Keypad_getkey+0xf6>
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	41 f0       	breq	.+16     	; 0x192 <Keypad_getkey+0x104>
 182:	3b c0       	rjmp	.+118    	; 0x1fa <Keypad_getkey+0x16c>
 184:	c2 30       	cpi	r28, 0x02	; 2
 186:	d1 05       	cpc	r29, r1
 188:	f1 f0       	breq	.+60     	; 0x1c6 <Keypad_getkey+0x138>
 18a:	c3 30       	cpi	r28, 0x03	; 3
 18c:	d1 05       	cpc	r29, r1
 18e:	41 f1       	breq	.+80     	; 0x1e0 <Keypad_getkey+0x152>
 190:	34 c0       	rjmp	.+104    	; 0x1fa <Keypad_getkey+0x16c>
					case (0):
					if (j == 0) return '7';
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	e9 f1       	breq	.+122    	; 0x212 <Keypad_getkey+0x184>
					else if (j == 1) return '4';
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	71 05       	cpc	r23, r1
 19c:	e1 f1       	breq	.+120    	; 0x216 <Keypad_getkey+0x188>
					else if (j == 2) return '1';
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	71 05       	cpc	r23, r1
 1a2:	d9 f1       	breq	.+118    	; 0x21a <Keypad_getkey+0x18c>
					else if (j == 3) return '?';
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	71 05       	cpc	r23, r1
 1a8:	41 f5       	brne	.+80     	; 0x1fa <Keypad_getkey+0x16c>
 1aa:	39 c0       	rjmp	.+114    	; 0x21e <Keypad_getkey+0x190>
					break;
					case (1):
					if (j == 0) return '8';
 1ac:	61 15       	cp	r22, r1
 1ae:	71 05       	cpc	r23, r1
 1b0:	c1 f1       	breq	.+112    	; 0x222 <Keypad_getkey+0x194>
					else if (j == 1) return '5';
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	71 05       	cpc	r23, r1
 1b6:	b9 f1       	breq	.+110    	; 0x226 <Keypad_getkey+0x198>
					else if (j == 2) return '2';
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	71 05       	cpc	r23, r1
 1bc:	b1 f1       	breq	.+108    	; 0x22a <Keypad_getkey+0x19c>
					else if (j == 3) return '0';
 1be:	63 30       	cpi	r22, 0x03	; 3
 1c0:	71 05       	cpc	r23, r1
 1c2:	d9 f4       	brne	.+54     	; 0x1fa <Keypad_getkey+0x16c>
 1c4:	34 c0       	rjmp	.+104    	; 0x22e <Keypad_getkey+0x1a0>
					break;
					case (2):
					if (j == 0) return '9';
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	99 f1       	breq	.+102    	; 0x232 <Keypad_getkey+0x1a4>
					else if (j == 1) return '6';
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	71 05       	cpc	r23, r1
 1d0:	91 f1       	breq	.+100    	; 0x236 <Keypad_getkey+0x1a8>
					else if (j == 2) return '3';
 1d2:	62 30       	cpi	r22, 0x02	; 2
 1d4:	71 05       	cpc	r23, r1
 1d6:	89 f1       	breq	.+98     	; 0x23a <Keypad_getkey+0x1ac>
					else if (j == 3) return '=';
 1d8:	63 30       	cpi	r22, 0x03	; 3
 1da:	71 05       	cpc	r23, r1
 1dc:	71 f4       	brne	.+28     	; 0x1fa <Keypad_getkey+0x16c>
 1de:	2f c0       	rjmp	.+94     	; 0x23e <Keypad_getkey+0x1b0>
					break;
					case (3):
					if (j == 0) return '/';
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	71 f1       	breq	.+92     	; 0x242 <Keypad_getkey+0x1b4>
					else if (j == 1) return '*';
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	71 05       	cpc	r23, r1
 1ea:	69 f1       	breq	.+90     	; 0x246 <Keypad_getkey+0x1b8>
					else if (j == 2) return '-';
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	71 05       	cpc	r23, r1
 1f0:	61 f1       	breq	.+88     	; 0x24a <Keypad_getkey+0x1bc>
					else if (j == 3) return '+';
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	71 05       	cpc	r23, r1
 1f6:	69 f5       	brne	.+90     	; 0x252 <Keypad_getkey+0x1c4>
 1f8:	2a c0       	rjmp	.+84     	; 0x24e <Keypad_getkey+0x1c0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	e9 16       	cp	r14, r25
 1fe:	f1 04       	cpc	r15, r1
 200:	0c f4       	brge	.+2      	; 0x204 <Keypad_getkey+0x176>
 202:	9b cf       	rjmp	.-202    	; 0x13a <Keypad_getkey+0xac>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c4 30       	cpi	r28, 0x04	; 4
 208:	d1 05       	cpc	r29, r1
 20a:	09 f0       	breq	.+2      	; 0x20e <Keypad_getkey+0x180>
 20c:	59 cf       	rjmp	.-334    	; 0xc0 <Keypad_getkey+0x32>
					break;
				}
			}
		}
	}
	return 'A';
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	26 c0       	rjmp	.+76     	; 0x25e <Keypad_getkey+0x1d0>
			if (!(keypadPIN & (1 << Key_padRow[j])))
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
				switch(i){
					case (0):
					if (j == 0) return '7';
 212:	87 e3       	ldi	r24, 0x37	; 55
 214:	24 c0       	rjmp	.+72     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 1) return '4';
 216:	84 e3       	ldi	r24, 0x34	; 52
 218:	22 c0       	rjmp	.+68     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 2) return '1';
 21a:	81 e3       	ldi	r24, 0x31	; 49
 21c:	20 c0       	rjmp	.+64     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 3) return '?';
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	1e c0       	rjmp	.+60     	; 0x25e <Keypad_getkey+0x1d0>
					break;
					case (1):
					if (j == 0) return '8';
 222:	88 e3       	ldi	r24, 0x38	; 56
 224:	1c c0       	rjmp	.+56     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 1) return '5';
 226:	85 e3       	ldi	r24, 0x35	; 53
 228:	1a c0       	rjmp	.+52     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 2) return '2';
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	18 c0       	rjmp	.+48     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 3) return '0';
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	16 c0       	rjmp	.+44     	; 0x25e <Keypad_getkey+0x1d0>
					break;
					case (2):
					if (j == 0) return '9';
 232:	89 e3       	ldi	r24, 0x39	; 57
 234:	14 c0       	rjmp	.+40     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 1) return '6';
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	12 c0       	rjmp	.+36     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 2) return '3';
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	10 c0       	rjmp	.+32     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 3) return '=';
 23e:	8d e3       	ldi	r24, 0x3D	; 61
 240:	0e c0       	rjmp	.+28     	; 0x25e <Keypad_getkey+0x1d0>
					break;
					case (3):
					if (j == 0) return '/';
 242:	8f e2       	ldi	r24, 0x2F	; 47
 244:	0c c0       	rjmp	.+24     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 1) return '*';
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	0a c0       	rjmp	.+20     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 2) return '-';
 24a:	8d e2       	ldi	r24, 0x2D	; 45
 24c:	08 c0       	rjmp	.+16     	; 0x25e <Keypad_getkey+0x1d0>
					else if (j == 3) return '+';
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	06 c0       	rjmp	.+12     	; 0x25e <Keypad_getkey+0x1d0>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	e8 16       	cp	r14, r24
 256:	f1 04       	cpc	r15, r1
 258:	0c f4       	brge	.+2      	; 0x25c <Keypad_getkey+0x1ce>
 25a:	6f cf       	rjmp	.-290    	; 0x13a <Keypad_getkey+0xac>
					break;
				}
			}
		}
	}
	return 'A';
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	df 90       	pop	r13
 26c:	cf 90       	pop	r12
 26e:	bf 90       	pop	r11
 270:	af 90       	pop	r10
 272:	08 95       	ret

00000274 <LCD_lcd_kick>:
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 274:	c3 9a       	sbi	0x18, 3	; 24
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e3       	ldi	r25, 0x30	; 48
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_lcd_kick+0x6>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_lcd_kick+0xc>
 280:	00 00       	nop
 282:	c3 98       	cbi	0x18, 3	; 24
 284:	08 95       	ret

00000286 <LCD_check_lcd_isbusy>:
 286:	8a b3       	in	r24, 0x1a	; 26
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	8a bb       	out	0x1a, r24	; 26
 28c:	c2 9a       	sbi	0x18, 2	; 24
 28e:	c1 98       	cbi	0x18, 1	; 24
 290:	f1 df       	rcall	.-30     	; 0x274 <LCD_lcd_kick>
 292:	8a b3       	in	r24, 0x1a	; 26
 294:	80 6f       	ori	r24, 0xF0	; 240
 296:	8a bb       	out	0x1a, r24	; 26
 298:	c2 98       	cbi	0x18, 2	; 24
 29a:	08 95       	ret

0000029c <LCD_WRITE_COMMAND>:
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
 2a0:	f2 df       	rcall	.-28     	; 0x286 <LCD_check_lcd_isbusy>
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	9c 2f       	mov	r25, r28
 2a6:	90 7f       	andi	r25, 0xF0	; 240
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	89 2b       	or	r24, r25
 2ac:	8b bb       	out	0x1b, r24	; 27
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	89 7f       	andi	r24, 0xF9	; 249
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	df df       	rcall	.-66     	; 0x274 <LCD_lcd_kick>
 2b6:	2b b3       	in	r18, 0x1b	; 27
 2b8:	30 e1       	ldi	r19, 0x10	; 16
 2ba:	c3 9f       	mul	r28, r19
 2bc:	c0 01       	movw	r24, r0
 2be:	11 24       	eor	r1, r1
 2c0:	92 2f       	mov	r25, r18
 2c2:	9f 70       	andi	r25, 0x0F	; 15
 2c4:	89 2b       	or	r24, r25
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	88 b3       	in	r24, 0x18	; 24
 2ca:	89 7f       	andi	r24, 0xF9	; 249
 2cc:	88 bb       	out	0x18, r24	; 24
 2ce:	d2 df       	rcall	.-92     	; 0x274 <LCD_lcd_kick>
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_clear_screen>:
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	e2 cf       	rjmp	.-60     	; 0x29c <LCD_WRITE_COMMAND>
 2d8:	08 95       	ret

000002da <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	87 e8       	ldi	r24, 0x87	; 135
 2dc:	93 e1       	ldi	r25, 0x13	; 19
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_INIT+0x4>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_INIT+0xa>
 2e4:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	8e 60       	ori	r24, 0x0E	; 14
 2ea:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2ec:	88 b3       	in	r24, 0x18	; 24
 2ee:	81 7f       	andi	r24, 0xF1	; 241
 2f0:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	8a bb       	out	0x1a, r24	; 26
 2f6:	85 ea       	ldi	r24, 0xA5	; 165
 2f8:	9e e0       	ldi	r25, 0x0E	; 14
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_INIT+0x20>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_INIT+0x26>
 300:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 302:	e8 df       	rcall	.-48     	; 0x2d4 <LCD_clear_screen>
	//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
	//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	ca df       	rcall	.-108    	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	c8 df       	rcall	.-112    	; 0x29c <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 30c:	86 e0       	ldi	r24, 0x06	; 6
 30e:	c6 df       	rcall	.-116    	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	c4 df       	rcall	.-120    	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 314:	8f e0       	ldi	r24, 0x0F	; 15
 316:	c2 cf       	rjmp	.-124    	; 0x29c <LCD_WRITE_COMMAND>
 318:	08 95       	ret

0000031a <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 31a:	cf 93       	push	r28
 31c:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 31e:	8b b3       	in	r24, 0x1b	; 27
 320:	9c 2f       	mov	r25, r28
 322:	90 7f       	andi	r25, 0xF0	; 240
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	89 2b       	or	r24, r25
 328:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 32a:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 32c:	c2 98       	cbi	0x18, 2	; 24
	LCD_lcd_kick();
 32e:	a2 df       	rcall	.-188    	; 0x274 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 330:	2b b3       	in	r18, 0x1b	; 27
 332:	30 e1       	ldi	r19, 0x10	; 16
 334:	c3 9f       	mul	r28, r19
 336:	c0 01       	movw	r24, r0
 338:	11 24       	eor	r1, r1
 33a:	92 2f       	mov	r25, r18
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	89 2b       	or	r24, r25
 340:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 342:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 344:	c2 98       	cbi	0x18, 2	; 24
	LCD_lcd_kick ();
 346:	96 df       	rcall	.-212    	; 0x274 <LCD_lcd_kick>
	#endif
}
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <main>:


int main()
{
	
	LCD_INIT();
 34c:	c6 df       	rcall	.-116    	; 0x2da <LCD_INIT>
	Keypad_init();
 34e:	96 de       	rcall	.-724    	; 0x7c <Keypad_init>
 350:	83 ed       	ldi	r24, 0xD3	; 211
 352:	90 e3       	ldi	r25, 0x30	; 48
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x8>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xe>
 35a:	00 00       	nop
	_delay_ms(50);
	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 35c:	98 de       	rcall	.-720    	; 0x8e <Keypad_getkey>
		switch(key_pressed){
 35e:	8f 33       	cpi	r24, 0x3F	; 63
 360:	19 f0       	breq	.+6      	; 0x368 <main+0x1c>
 362:	81 34       	cpi	r24, 0x41	; 65
 364:	d9 f3       	breq	.-10     	; 0x35c <main+0x10>
 366:	02 c0       	rjmp	.+4      	; 0x36c <main+0x20>
			case 'A':
				break;
			case '?':
				LCD_clear_screen();
 368:	b5 df       	rcall	.-150    	; 0x2d4 <LCD_clear_screen>
				break;
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <main+0x10>
			default:
				LCD_WRITE_CHAR(key_pressed);
 36c:	d6 df       	rcall	.-84     	; 0x31a <LCD_WRITE_CHAR>
				break;
 36e:	f6 cf       	rjmp	.-20     	; 0x35c <main+0x10>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
