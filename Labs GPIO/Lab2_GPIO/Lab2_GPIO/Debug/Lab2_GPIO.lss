
Lab2_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010f  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d4  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003d38  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000233  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	16 c0       	rjmp	.+44     	; 0x90 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:
#define F_CPU 8000000UL  // Define CPU frequency before including util/delay.h

int main (void)
{
    // Set DDRA pins 0, 2, and 4 as output (0x15 = 0b00010101)
    DDRA = 0X15;    // 0b00010101
  66:	85 e1       	ldi	r24, 0x15	; 21
  68:	8a bb       	out	0x1a, r24	; 26
    
    // Set pin 0 of DDRC as input
    ClearBit(DDRC, 0);
  6a:	a0 98       	cbi	0x14, 0	; 20
    
    // Enable internal pull-up resistor on pin 0 of PORTC
    SetBit(PORTC, 0);
  6c:	a8 9a       	sbi	0x15, 0	; 21
        // If button on PINC0 is pressed (low)
        if (ReadBit(PINC, 0) == 0)
        {
			while (ReadBit(PINC, 0) == 0)
			{
				ToggleBit(PORTA,0) ; 
  6e:	91 e0       	ldi	r25, 0x01	; 1
    SetBit(PORTC, 0);
	unsigned char flag = 0 ; 
    while(1)
    {
        // If button on PINC0 is pressed (low)
        if (ReadBit(PINC, 0) == 0)
  70:	98 99       	sbic	0x13, 0	; 19
  72:	fe cf       	rjmp	.-4      	; 0x70 <main+0xa>
        {
			while (ReadBit(PINC, 0) == 0)
  74:	98 99       	sbic	0x13, 0	; 19
  76:	fc cf       	rjmp	.-8      	; 0x70 <main+0xa>
			{
				ToggleBit(PORTA,0) ; 
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	89 27       	eor	r24, r25
  7c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e3 e2       	ldi	r30, 0x23	; 35
  80:	f4 ef       	ldi	r31, 0xF4	; 244
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x1c>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x22>
  88:	00 00       	nop
    while(1)
    {
        // If button on PINC0 is pressed (low)
        if (ReadBit(PINC, 0) == 0)
        {
			while (ReadBit(PINC, 0) == 0)
  8a:	98 9b       	sbis	0x13, 0	; 19
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0x12>
  8e:	f0 cf       	rjmp	.-32     	; 0x70 <main+0xa>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
