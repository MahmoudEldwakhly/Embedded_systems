
// @copyright :  Mahmoud Eldwakhly

// Lab 1 GPIO by STM

#include <stdint.h>  // Include standard integer types
#include <stdlib.h>  // For memory allocations functions
#include <stdio.h>


// Define base addresses for RCC and GPIO peripherals
//RCC
#define RCC_BASE 0x40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18) // RCC APB2 peripheral clock enable register
#define RCC_IOPAEN (1 << 2)    // Bit mask for enabling GPIOA clock
#define RCC_IOPBEN (1 << 3)    // Bit mask for enabling GPIOB clock
#define RCC_AFIOEN (1 << 0)    // Bit mask for enabling Alternate function I/O clock
// GPIO
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)   // GPIO port configuration register high
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)   // GPIO port output data register
#define GPIOA_CRL *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_IDR *(volatile uint32_t *)(GPIOA_BASE + 0x08)

#define GPIOA13 (1UL << 13)    // Bit mask for GPIO pin 13

#define GPIOB_BASE 0x40010C00
#define GPIOB_CRH *(volatile uint32_t *)(GPIOB_BASE + 0x04)   // GPIO port configuration register high
#define GPIOB_ODR *(volatile uint32_t *)(GPIOB_BASE + 0x0C)   // GPIO port output data register
#define GPIOB_IDR *(volatile uint32_t *)(GPIOB_BASE + 0x08)	// GPIO port Input data register
#define GPIOB_CRL *(volatile uint32_t *)(GPIOB_BASE + 0x00)






void clock_init()
{
	// Enable the clock for GPIOA by setting the IOPAEN bit in RCC_APB2ENR
	RCC_APB2ENR |= RCC_IOPAEN;
	// Enable the clock for GPIOB by setting the IOPBEN bit in RCC_APB2ENR
	RCC_APB2ENR |= RCC_IOPBEN;
}

void GPIO_init()
{


}

int main(void)
{
	clock_init() ;
	GPIO_init() ;


	while(1)
	{



	}


}


